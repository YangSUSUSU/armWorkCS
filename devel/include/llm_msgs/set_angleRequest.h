// Generated by gencpp from file llm_msgs/set_angleRequest.msg
// DO NOT EDIT!


#ifndef LLM_MSGS_MESSAGE_SET_ANGLEREQUEST_H
#define LLM_MSGS_MESSAGE_SET_ANGLEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace llm_msgs
{
template <class ContainerAllocator>
struct set_angleRequest_
{
  typedef set_angleRequest_<ContainerAllocator> Type;

  set_angleRequest_()
    : angle0Ratio(0.0)
    , angle1Ratio(0.0)
    , angle2Ratio(0.0)
    , angle3Ratio(0.0)
    , angle4Ratio(0.0)
    , angle5Ratio(0.0)  {
    }
  set_angleRequest_(const ContainerAllocator& _alloc)
    : angle0Ratio(0.0)
    , angle1Ratio(0.0)
    , angle2Ratio(0.0)
    , angle3Ratio(0.0)
    , angle4Ratio(0.0)
    , angle5Ratio(0.0)  {
  (void)_alloc;
    }



   typedef float _angle0Ratio_type;
  _angle0Ratio_type angle0Ratio;

   typedef float _angle1Ratio_type;
  _angle1Ratio_type angle1Ratio;

   typedef float _angle2Ratio_type;
  _angle2Ratio_type angle2Ratio;

   typedef float _angle3Ratio_type;
  _angle3Ratio_type angle3Ratio;

   typedef float _angle4Ratio_type;
  _angle4Ratio_type angle4Ratio;

   typedef float _angle5Ratio_type;
  _angle5Ratio_type angle5Ratio;





  typedef boost::shared_ptr< ::llm_msgs::set_angleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::llm_msgs::set_angleRequest_<ContainerAllocator> const> ConstPtr;

}; // struct set_angleRequest_

typedef ::llm_msgs::set_angleRequest_<std::allocator<void> > set_angleRequest;

typedef boost::shared_ptr< ::llm_msgs::set_angleRequest > set_angleRequestPtr;
typedef boost::shared_ptr< ::llm_msgs::set_angleRequest const> set_angleRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::llm_msgs::set_angleRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::llm_msgs::set_angleRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::llm_msgs::set_angleRequest_<ContainerAllocator1> & lhs, const ::llm_msgs::set_angleRequest_<ContainerAllocator2> & rhs)
{
  return lhs.angle0Ratio == rhs.angle0Ratio &&
    lhs.angle1Ratio == rhs.angle1Ratio &&
    lhs.angle2Ratio == rhs.angle2Ratio &&
    lhs.angle3Ratio == rhs.angle3Ratio &&
    lhs.angle4Ratio == rhs.angle4Ratio &&
    lhs.angle5Ratio == rhs.angle5Ratio;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::llm_msgs::set_angleRequest_<ContainerAllocator1> & lhs, const ::llm_msgs::set_angleRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace llm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::llm_msgs::set_angleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::llm_msgs::set_angleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::llm_msgs::set_angleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::llm_msgs::set_angleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::llm_msgs::set_angleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::llm_msgs::set_angleRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::llm_msgs::set_angleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dc73e456d4729e71af66373d93d820b7";
  }

  static const char* value(const ::llm_msgs::set_angleRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdc73e456d4729e71ULL;
  static const uint64_t static_value2 = 0xaf66373d93d820b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::llm_msgs::set_angleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "llm_msgs/set_angleRequest";
  }

  static const char* value(const ::llm_msgs::set_angleRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::llm_msgs::set_angleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 angle0Ratio\n"
"float32 angle1Ratio\n"
"float32 angle2Ratio\n"
"float32 angle3Ratio\n"
"float32 angle4Ratio\n"
"float32 angle5Ratio\n"
;
  }

  static const char* value(const ::llm_msgs::set_angleRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::llm_msgs::set_angleRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle0Ratio);
      stream.next(m.angle1Ratio);
      stream.next(m.angle2Ratio);
      stream.next(m.angle3Ratio);
      stream.next(m.angle4Ratio);
      stream.next(m.angle5Ratio);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct set_angleRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::llm_msgs::set_angleRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::llm_msgs::set_angleRequest_<ContainerAllocator>& v)
  {
    s << indent << "angle0Ratio: ";
    Printer<float>::stream(s, indent + "  ", v.angle0Ratio);
    s << indent << "angle1Ratio: ";
    Printer<float>::stream(s, indent + "  ", v.angle1Ratio);
    s << indent << "angle2Ratio: ";
    Printer<float>::stream(s, indent + "  ", v.angle2Ratio);
    s << indent << "angle3Ratio: ";
    Printer<float>::stream(s, indent + "  ", v.angle3Ratio);
    s << indent << "angle4Ratio: ";
    Printer<float>::stream(s, indent + "  ", v.angle4Ratio);
    s << indent << "angle5Ratio: ";
    Printer<float>::stream(s, indent + "  ", v.angle5Ratio);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LLM_MSGS_MESSAGE_SET_ANGLEREQUEST_H
