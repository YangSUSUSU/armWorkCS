// Generated by gencpp from file llm_msgs/set_angleResponse.msg
// DO NOT EDIT!


#ifndef LLM_MSGS_MESSAGE_SET_ANGLERESPONSE_H
#define LLM_MSGS_MESSAGE_SET_ANGLERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace llm_msgs
{
template <class ContainerAllocator>
struct set_angleResponse_
{
  typedef set_angleResponse_<ContainerAllocator> Type;

  set_angleResponse_()
    : angle_accepted(false)  {
    }
  set_angleResponse_(const ContainerAllocator& _alloc)
    : angle_accepted(false)  {
  (void)_alloc;
    }



   typedef uint8_t _angle_accepted_type;
  _angle_accepted_type angle_accepted;





  typedef boost::shared_ptr< ::llm_msgs::set_angleResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::llm_msgs::set_angleResponse_<ContainerAllocator> const> ConstPtr;

}; // struct set_angleResponse_

typedef ::llm_msgs::set_angleResponse_<std::allocator<void> > set_angleResponse;

typedef boost::shared_ptr< ::llm_msgs::set_angleResponse > set_angleResponsePtr;
typedef boost::shared_ptr< ::llm_msgs::set_angleResponse const> set_angleResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::llm_msgs::set_angleResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::llm_msgs::set_angleResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::llm_msgs::set_angleResponse_<ContainerAllocator1> & lhs, const ::llm_msgs::set_angleResponse_<ContainerAllocator2> & rhs)
{
  return lhs.angle_accepted == rhs.angle_accepted;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::llm_msgs::set_angleResponse_<ContainerAllocator1> & lhs, const ::llm_msgs::set_angleResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace llm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::llm_msgs::set_angleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::llm_msgs::set_angleResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::llm_msgs::set_angleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::llm_msgs::set_angleResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::llm_msgs::set_angleResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::llm_msgs::set_angleResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::llm_msgs::set_angleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c1508b076c4c46f43d5103fcfc81271e";
  }

  static const char* value(const ::llm_msgs::set_angleResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc1508b076c4c46f4ULL;
  static const uint64_t static_value2 = 0x3d5103fcfc81271eULL;
};

template<class ContainerAllocator>
struct DataType< ::llm_msgs::set_angleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "llm_msgs/set_angleResponse";
  }

  static const char* value(const ::llm_msgs::set_angleResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::llm_msgs::set_angleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool angle_accepted\n"
;
  }

  static const char* value(const ::llm_msgs::set_angleResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::llm_msgs::set_angleResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle_accepted);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct set_angleResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::llm_msgs::set_angleResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::llm_msgs::set_angleResponse_<ContainerAllocator>& v)
  {
    s << indent << "angle_accepted: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.angle_accepted);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LLM_MSGS_MESSAGE_SET_ANGLERESPONSE_H
