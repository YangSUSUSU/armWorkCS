// Generated by gencpp from file llm_msgs/set_forceRequest.msg
// DO NOT EDIT!


#ifndef LLM_MSGS_MESSAGE_SET_FORCEREQUEST_H
#define LLM_MSGS_MESSAGE_SET_FORCEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace llm_msgs
{
template <class ContainerAllocator>
struct set_forceRequest_
{
  typedef set_forceRequest_<ContainerAllocator> Type;

  set_forceRequest_()
    : force0Ratio(0.0)
    , force1Ratio(0.0)
    , force2Ratio(0.0)
    , force3Ratio(0.0)
    , force4Ratio(0.0)
    , force5Ratio(0.0)  {
    }
  set_forceRequest_(const ContainerAllocator& _alloc)
    : force0Ratio(0.0)
    , force1Ratio(0.0)
    , force2Ratio(0.0)
    , force3Ratio(0.0)
    , force4Ratio(0.0)
    , force5Ratio(0.0)  {
  (void)_alloc;
    }



   typedef float _force0Ratio_type;
  _force0Ratio_type force0Ratio;

   typedef float _force1Ratio_type;
  _force1Ratio_type force1Ratio;

   typedef float _force2Ratio_type;
  _force2Ratio_type force2Ratio;

   typedef float _force3Ratio_type;
  _force3Ratio_type force3Ratio;

   typedef float _force4Ratio_type;
  _force4Ratio_type force4Ratio;

   typedef float _force5Ratio_type;
  _force5Ratio_type force5Ratio;





  typedef boost::shared_ptr< ::llm_msgs::set_forceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::llm_msgs::set_forceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct set_forceRequest_

typedef ::llm_msgs::set_forceRequest_<std::allocator<void> > set_forceRequest;

typedef boost::shared_ptr< ::llm_msgs::set_forceRequest > set_forceRequestPtr;
typedef boost::shared_ptr< ::llm_msgs::set_forceRequest const> set_forceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::llm_msgs::set_forceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::llm_msgs::set_forceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::llm_msgs::set_forceRequest_<ContainerAllocator1> & lhs, const ::llm_msgs::set_forceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.force0Ratio == rhs.force0Ratio &&
    lhs.force1Ratio == rhs.force1Ratio &&
    lhs.force2Ratio == rhs.force2Ratio &&
    lhs.force3Ratio == rhs.force3Ratio &&
    lhs.force4Ratio == rhs.force4Ratio &&
    lhs.force5Ratio == rhs.force5Ratio;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::llm_msgs::set_forceRequest_<ContainerAllocator1> & lhs, const ::llm_msgs::set_forceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace llm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::llm_msgs::set_forceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::llm_msgs::set_forceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::llm_msgs::set_forceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::llm_msgs::set_forceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::llm_msgs::set_forceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::llm_msgs::set_forceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::llm_msgs::set_forceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b85daa8a508267c29c0e9abef4453eb9";
  }

  static const char* value(const ::llm_msgs::set_forceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb85daa8a508267c2ULL;
  static const uint64_t static_value2 = 0x9c0e9abef4453eb9ULL;
};

template<class ContainerAllocator>
struct DataType< ::llm_msgs::set_forceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "llm_msgs/set_forceRequest";
  }

  static const char* value(const ::llm_msgs::set_forceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::llm_msgs::set_forceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 force0Ratio\n"
"float32 force1Ratio\n"
"float32 force2Ratio\n"
"float32 force3Ratio\n"
"float32 force4Ratio\n"
"float32 force5Ratio\n"
;
  }

  static const char* value(const ::llm_msgs::set_forceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::llm_msgs::set_forceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.force0Ratio);
      stream.next(m.force1Ratio);
      stream.next(m.force2Ratio);
      stream.next(m.force3Ratio);
      stream.next(m.force4Ratio);
      stream.next(m.force5Ratio);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct set_forceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::llm_msgs::set_forceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::llm_msgs::set_forceRequest_<ContainerAllocator>& v)
  {
    s << indent << "force0Ratio: ";
    Printer<float>::stream(s, indent + "  ", v.force0Ratio);
    s << indent << "force1Ratio: ";
    Printer<float>::stream(s, indent + "  ", v.force1Ratio);
    s << indent << "force2Ratio: ";
    Printer<float>::stream(s, indent + "  ", v.force2Ratio);
    s << indent << "force3Ratio: ";
    Printer<float>::stream(s, indent + "  ", v.force3Ratio);
    s << indent << "force4Ratio: ";
    Printer<float>::stream(s, indent + "  ", v.force4Ratio);
    s << indent << "force5Ratio: ";
    Printer<float>::stream(s, indent + "  ", v.force5Ratio);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LLM_MSGS_MESSAGE_SET_FORCEREQUEST_H
