// Generated by gencpp from file llm_msgs/set_forceResponse.msg
// DO NOT EDIT!


#ifndef LLM_MSGS_MESSAGE_SET_FORCERESPONSE_H
#define LLM_MSGS_MESSAGE_SET_FORCERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace llm_msgs
{
template <class ContainerAllocator>
struct set_forceResponse_
{
  typedef set_forceResponse_<ContainerAllocator> Type;

  set_forceResponse_()
    : force_accepted(false)  {
    }
  set_forceResponse_(const ContainerAllocator& _alloc)
    : force_accepted(false)  {
  (void)_alloc;
    }



   typedef uint8_t _force_accepted_type;
  _force_accepted_type force_accepted;





  typedef boost::shared_ptr< ::llm_msgs::set_forceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::llm_msgs::set_forceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct set_forceResponse_

typedef ::llm_msgs::set_forceResponse_<std::allocator<void> > set_forceResponse;

typedef boost::shared_ptr< ::llm_msgs::set_forceResponse > set_forceResponsePtr;
typedef boost::shared_ptr< ::llm_msgs::set_forceResponse const> set_forceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::llm_msgs::set_forceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::llm_msgs::set_forceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::llm_msgs::set_forceResponse_<ContainerAllocator1> & lhs, const ::llm_msgs::set_forceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.force_accepted == rhs.force_accepted;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::llm_msgs::set_forceResponse_<ContainerAllocator1> & lhs, const ::llm_msgs::set_forceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace llm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::llm_msgs::set_forceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::llm_msgs::set_forceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::llm_msgs::set_forceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::llm_msgs::set_forceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::llm_msgs::set_forceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::llm_msgs::set_forceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::llm_msgs::set_forceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6133e5998441599a96899c74dc63d85d";
  }

  static const char* value(const ::llm_msgs::set_forceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6133e5998441599aULL;
  static const uint64_t static_value2 = 0x96899c74dc63d85dULL;
};

template<class ContainerAllocator>
struct DataType< ::llm_msgs::set_forceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "llm_msgs/set_forceResponse";
  }

  static const char* value(const ::llm_msgs::set_forceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::llm_msgs::set_forceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool force_accepted\n"
"\n"
;
  }

  static const char* value(const ::llm_msgs::set_forceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::llm_msgs::set_forceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.force_accepted);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct set_forceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::llm_msgs::set_forceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::llm_msgs::set_forceResponse_<ContainerAllocator>& v)
  {
    s << indent << "force_accepted: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.force_accepted);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LLM_MSGS_MESSAGE_SET_FORCERESPONSE_H
