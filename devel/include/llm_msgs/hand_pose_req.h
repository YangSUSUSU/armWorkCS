// Generated by gencpp from file llm_msgs/hand_pose_req.msg
// DO NOT EDIT!


#ifndef LLM_MSGS_MESSAGE_HAND_POSE_REQ_H
#define LLM_MSGS_MESSAGE_HAND_POSE_REQ_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>

namespace llm_msgs
{
template <class ContainerAllocator>
struct hand_pose_req_
{
  typedef hand_pose_req_<ContainerAllocator> Type;

  hand_pose_req_()
    : header()
    , hand_move_enable(0)
    , hand_side(0)
    , hand_reset(0)
    , pose_req()
    , head_move_enable(0)
    , rpy()
    , gripper_move_enable(0)
    , gripper_side(0)
    , finger_status(0)
    , little_finger(0.0)
    , ring_finger(0.0)
    , middle_finger(0.0)
    , index_finger(0.0)
    , thumb_bending(0.0)
    , thumb_rotating(0.0)
    , waist_enable(0)
    , waist_rotate_ang(0.0)  {
    }
  hand_pose_req_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , hand_move_enable(0)
    , hand_side(0)
    , hand_reset(0)
    , pose_req(_alloc)
    , head_move_enable(0)
    , rpy(_alloc)
    , gripper_move_enable(0)
    , gripper_side(0)
    , finger_status(0)
    , little_finger(0.0)
    , ring_finger(0.0)
    , middle_finger(0.0)
    , index_finger(0.0)
    , thumb_bending(0.0)
    , thumb_rotating(0.0)
    , waist_enable(0)
    , waist_rotate_ang(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _hand_move_enable_type;
  _hand_move_enable_type hand_move_enable;

   typedef uint8_t _hand_side_type;
  _hand_side_type hand_side;

   typedef uint8_t _hand_reset_type;
  _hand_reset_type hand_reset;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_req_type;
  _pose_req_type pose_req;

   typedef uint8_t _head_move_enable_type;
  _head_move_enable_type head_move_enable;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _rpy_type;
  _rpy_type rpy;

   typedef uint8_t _gripper_move_enable_type;
  _gripper_move_enable_type gripper_move_enable;

   typedef uint8_t _gripper_side_type;
  _gripper_side_type gripper_side;

   typedef uint8_t _finger_status_type;
  _finger_status_type finger_status;

   typedef float _little_finger_type;
  _little_finger_type little_finger;

   typedef float _ring_finger_type;
  _ring_finger_type ring_finger;

   typedef float _middle_finger_type;
  _middle_finger_type middle_finger;

   typedef float _index_finger_type;
  _index_finger_type index_finger;

   typedef float _thumb_bending_type;
  _thumb_bending_type thumb_bending;

   typedef float _thumb_rotating_type;
  _thumb_rotating_type thumb_rotating;

   typedef uint8_t _waist_enable_type;
  _waist_enable_type waist_enable;

   typedef float _waist_rotate_ang_type;
  _waist_rotate_ang_type waist_rotate_ang;





  typedef boost::shared_ptr< ::llm_msgs::hand_pose_req_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::llm_msgs::hand_pose_req_<ContainerAllocator> const> ConstPtr;

}; // struct hand_pose_req_

typedef ::llm_msgs::hand_pose_req_<std::allocator<void> > hand_pose_req;

typedef boost::shared_ptr< ::llm_msgs::hand_pose_req > hand_pose_reqPtr;
typedef boost::shared_ptr< ::llm_msgs::hand_pose_req const> hand_pose_reqConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::llm_msgs::hand_pose_req_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::llm_msgs::hand_pose_req_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::llm_msgs::hand_pose_req_<ContainerAllocator1> & lhs, const ::llm_msgs::hand_pose_req_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.hand_move_enable == rhs.hand_move_enable &&
    lhs.hand_side == rhs.hand_side &&
    lhs.hand_reset == rhs.hand_reset &&
    lhs.pose_req == rhs.pose_req &&
    lhs.head_move_enable == rhs.head_move_enable &&
    lhs.rpy == rhs.rpy &&
    lhs.gripper_move_enable == rhs.gripper_move_enable &&
    lhs.gripper_side == rhs.gripper_side &&
    lhs.finger_status == rhs.finger_status &&
    lhs.little_finger == rhs.little_finger &&
    lhs.ring_finger == rhs.ring_finger &&
    lhs.middle_finger == rhs.middle_finger &&
    lhs.index_finger == rhs.index_finger &&
    lhs.thumb_bending == rhs.thumb_bending &&
    lhs.thumb_rotating == rhs.thumb_rotating &&
    lhs.waist_enable == rhs.waist_enable &&
    lhs.waist_rotate_ang == rhs.waist_rotate_ang;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::llm_msgs::hand_pose_req_<ContainerAllocator1> & lhs, const ::llm_msgs::hand_pose_req_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace llm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::llm_msgs::hand_pose_req_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::llm_msgs::hand_pose_req_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::llm_msgs::hand_pose_req_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::llm_msgs::hand_pose_req_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::llm_msgs::hand_pose_req_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::llm_msgs::hand_pose_req_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::llm_msgs::hand_pose_req_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b6b3b996b8f56c6f6190cb1b04d5143a";
  }

  static const char* value(const ::llm_msgs::hand_pose_req_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb6b3b996b8f56c6fULL;
  static const uint64_t static_value2 = 0x6190cb1b04d5143aULL;
};

template<class ContainerAllocator>
struct DataType< ::llm_msgs::hand_pose_req_<ContainerAllocator> >
{
  static const char* value()
  {
    return "llm_msgs/hand_pose_req";
  }

  static const char* value(const ::llm_msgs::hand_pose_req_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::llm_msgs::hand_pose_req_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header     \n"
"\n"
"# 以下分别为手臂、头部、手指对应的控制数据，相应数据仅当对应使能位有效时才有意义\n"
"# 例如: 当hand_move_enable为1(enable状态)时, pose_req的数据才需要被执行，才有意义\n"
"\n"
"# 手臂移动使能位-hand_move_enable, 手臂目标位姿-pose_req, 手臂复位-hand_reset(0-非复位位姿，1-复位位姿)\n"
"uint8 hand_move_enable    \n"
"uint8 hand_side \n"
"uint8 hand_reset          \n"
"geometry_msgs/Pose pose_req \n"
"\n"
"# 头部移动使能位-move_enable, 头部目标位姿-(R, P, Y）\n"
"uint8 head_move_enable    \n"
"float64[] rpy\n"
"\n"
"# 手部手指移动使能位-gripper_move_enable, 手指开度-[figure_1, figure_2, figure_3, figure_4, figure_5]\n"
"uint8 gripper_move_enable \n"
"uint8 gripper_side  \n"
"uint8 finger_status\n"
"float32 little_finger\n"
"float32 ring_finger\n"
"float32 middle_finger\n"
"float32 index_finger\n"
"float32 thumb_bending\n"
"float32 thumb_rotating\n"
"\n"
"# 腰部转动\n"
"uint8 waist_enable # 0-disable, 1-enable, 2-default, 其他数值暂不可用，留待后续\n"
"float32 waist_rotate_ang # 腰部旋转角度-rad\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::llm_msgs::hand_pose_req_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::llm_msgs::hand_pose_req_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.hand_move_enable);
      stream.next(m.hand_side);
      stream.next(m.hand_reset);
      stream.next(m.pose_req);
      stream.next(m.head_move_enable);
      stream.next(m.rpy);
      stream.next(m.gripper_move_enable);
      stream.next(m.gripper_side);
      stream.next(m.finger_status);
      stream.next(m.little_finger);
      stream.next(m.ring_finger);
      stream.next(m.middle_finger);
      stream.next(m.index_finger);
      stream.next(m.thumb_bending);
      stream.next(m.thumb_rotating);
      stream.next(m.waist_enable);
      stream.next(m.waist_rotate_ang);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct hand_pose_req_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::llm_msgs::hand_pose_req_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::llm_msgs::hand_pose_req_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "hand_move_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hand_move_enable);
    s << indent << "hand_side: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hand_side);
    s << indent << "hand_reset: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hand_reset);
    s << indent << "pose_req: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_req);
    s << indent << "head_move_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.head_move_enable);
    s << indent << "rpy[]" << std::endl;
    for (size_t i = 0; i < v.rpy.size(); ++i)
    {
      s << indent << "  rpy[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rpy[i]);
    }
    s << indent << "gripper_move_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gripper_move_enable);
    s << indent << "gripper_side: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gripper_side);
    s << indent << "finger_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.finger_status);
    s << indent << "little_finger: ";
    Printer<float>::stream(s, indent + "  ", v.little_finger);
    s << indent << "ring_finger: ";
    Printer<float>::stream(s, indent + "  ", v.ring_finger);
    s << indent << "middle_finger: ";
    Printer<float>::stream(s, indent + "  ", v.middle_finger);
    s << indent << "index_finger: ";
    Printer<float>::stream(s, indent + "  ", v.index_finger);
    s << indent << "thumb_bending: ";
    Printer<float>::stream(s, indent + "  ", v.thumb_bending);
    s << indent << "thumb_rotating: ";
    Printer<float>::stream(s, indent + "  ", v.thumb_rotating);
    s << indent << "waist_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.waist_enable);
    s << indent << "waist_rotate_ang: ";
    Printer<float>::stream(s, indent + "  ", v.waist_rotate_ang);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LLM_MSGS_MESSAGE_HAND_POSE_REQ_H
