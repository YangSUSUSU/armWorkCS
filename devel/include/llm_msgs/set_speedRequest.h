// Generated by gencpp from file llm_msgs/set_speedRequest.msg
// DO NOT EDIT!


#ifndef LLM_MSGS_MESSAGE_SET_SPEEDREQUEST_H
#define LLM_MSGS_MESSAGE_SET_SPEEDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace llm_msgs
{
template <class ContainerAllocator>
struct set_speedRequest_
{
  typedef set_speedRequest_<ContainerAllocator> Type;

  set_speedRequest_()
    : speed0Ratio(0.0)
    , speed1Ratio(0.0)
    , speed2Ratio(0.0)
    , speed3Ratio(0.0)
    , speed4Ratio(0.0)
    , speed5Ratio(0.0)  {
    }
  set_speedRequest_(const ContainerAllocator& _alloc)
    : speed0Ratio(0.0)
    , speed1Ratio(0.0)
    , speed2Ratio(0.0)
    , speed3Ratio(0.0)
    , speed4Ratio(0.0)
    , speed5Ratio(0.0)  {
  (void)_alloc;
    }



   typedef float _speed0Ratio_type;
  _speed0Ratio_type speed0Ratio;

   typedef float _speed1Ratio_type;
  _speed1Ratio_type speed1Ratio;

   typedef float _speed2Ratio_type;
  _speed2Ratio_type speed2Ratio;

   typedef float _speed3Ratio_type;
  _speed3Ratio_type speed3Ratio;

   typedef float _speed4Ratio_type;
  _speed4Ratio_type speed4Ratio;

   typedef float _speed5Ratio_type;
  _speed5Ratio_type speed5Ratio;





  typedef boost::shared_ptr< ::llm_msgs::set_speedRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::llm_msgs::set_speedRequest_<ContainerAllocator> const> ConstPtr;

}; // struct set_speedRequest_

typedef ::llm_msgs::set_speedRequest_<std::allocator<void> > set_speedRequest;

typedef boost::shared_ptr< ::llm_msgs::set_speedRequest > set_speedRequestPtr;
typedef boost::shared_ptr< ::llm_msgs::set_speedRequest const> set_speedRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::llm_msgs::set_speedRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::llm_msgs::set_speedRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::llm_msgs::set_speedRequest_<ContainerAllocator1> & lhs, const ::llm_msgs::set_speedRequest_<ContainerAllocator2> & rhs)
{
  return lhs.speed0Ratio == rhs.speed0Ratio &&
    lhs.speed1Ratio == rhs.speed1Ratio &&
    lhs.speed2Ratio == rhs.speed2Ratio &&
    lhs.speed3Ratio == rhs.speed3Ratio &&
    lhs.speed4Ratio == rhs.speed4Ratio &&
    lhs.speed5Ratio == rhs.speed5Ratio;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::llm_msgs::set_speedRequest_<ContainerAllocator1> & lhs, const ::llm_msgs::set_speedRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace llm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::llm_msgs::set_speedRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::llm_msgs::set_speedRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::llm_msgs::set_speedRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::llm_msgs::set_speedRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::llm_msgs::set_speedRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::llm_msgs::set_speedRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::llm_msgs::set_speedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fce368f208823771f7ce8907032a98d8";
  }

  static const char* value(const ::llm_msgs::set_speedRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfce368f208823771ULL;
  static const uint64_t static_value2 = 0xf7ce8907032a98d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::llm_msgs::set_speedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "llm_msgs/set_speedRequest";
  }

  static const char* value(const ::llm_msgs::set_speedRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::llm_msgs::set_speedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 speed0Ratio\n"
"float32 speed1Ratio\n"
"float32 speed2Ratio\n"
"float32 speed3Ratio\n"
"float32 speed4Ratio\n"
"float32 speed5Ratio\n"
;
  }

  static const char* value(const ::llm_msgs::set_speedRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::llm_msgs::set_speedRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed0Ratio);
      stream.next(m.speed1Ratio);
      stream.next(m.speed2Ratio);
      stream.next(m.speed3Ratio);
      stream.next(m.speed4Ratio);
      stream.next(m.speed5Ratio);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct set_speedRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::llm_msgs::set_speedRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::llm_msgs::set_speedRequest_<ContainerAllocator>& v)
  {
    s << indent << "speed0Ratio: ";
    Printer<float>::stream(s, indent + "  ", v.speed0Ratio);
    s << indent << "speed1Ratio: ";
    Printer<float>::stream(s, indent + "  ", v.speed1Ratio);
    s << indent << "speed2Ratio: ";
    Printer<float>::stream(s, indent + "  ", v.speed2Ratio);
    s << indent << "speed3Ratio: ";
    Printer<float>::stream(s, indent + "  ", v.speed3Ratio);
    s << indent << "speed4Ratio: ";
    Printer<float>::stream(s, indent + "  ", v.speed4Ratio);
    s << indent << "speed5Ratio: ";
    Printer<float>::stream(s, indent + "  ", v.speed5Ratio);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LLM_MSGS_MESSAGE_SET_SPEEDREQUEST_H
