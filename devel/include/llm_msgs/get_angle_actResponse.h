// Generated by gencpp from file llm_msgs/get_angle_actResponse.msg
// DO NOT EDIT!


#ifndef LLM_MSGS_MESSAGE_GET_ANGLE_ACTRESPONSE_H
#define LLM_MSGS_MESSAGE_GET_ANGLE_ACTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace llm_msgs
{
template <class ContainerAllocator>
struct get_angle_actResponse_
{
  typedef get_angle_actResponse_<ContainerAllocator> Type;

  get_angle_actResponse_()
    : curangleRatio()  {
      curangleRatio.assign(0.0);
  }
  get_angle_actResponse_(const ContainerAllocator& _alloc)
    : curangleRatio()  {
  (void)_alloc;
      curangleRatio.assign(0.0);
  }



   typedef boost::array<float, 6>  _curangleRatio_type;
  _curangleRatio_type curangleRatio;





  typedef boost::shared_ptr< ::llm_msgs::get_angle_actResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::llm_msgs::get_angle_actResponse_<ContainerAllocator> const> ConstPtr;

}; // struct get_angle_actResponse_

typedef ::llm_msgs::get_angle_actResponse_<std::allocator<void> > get_angle_actResponse;

typedef boost::shared_ptr< ::llm_msgs::get_angle_actResponse > get_angle_actResponsePtr;
typedef boost::shared_ptr< ::llm_msgs::get_angle_actResponse const> get_angle_actResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::llm_msgs::get_angle_actResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::llm_msgs::get_angle_actResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::llm_msgs::get_angle_actResponse_<ContainerAllocator1> & lhs, const ::llm_msgs::get_angle_actResponse_<ContainerAllocator2> & rhs)
{
  return lhs.curangleRatio == rhs.curangleRatio;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::llm_msgs::get_angle_actResponse_<ContainerAllocator1> & lhs, const ::llm_msgs::get_angle_actResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace llm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::llm_msgs::get_angle_actResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::llm_msgs::get_angle_actResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::llm_msgs::get_angle_actResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::llm_msgs::get_angle_actResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::llm_msgs::get_angle_actResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::llm_msgs::get_angle_actResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::llm_msgs::get_angle_actResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a40d1cc41b6533f906a6a90344676b6";
  }

  static const char* value(const ::llm_msgs::get_angle_actResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a40d1cc41b6533fULL;
  static const uint64_t static_value2 = 0x906a6a90344676b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::llm_msgs::get_angle_actResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "llm_msgs/get_angle_actResponse";
  }

  static const char* value(const ::llm_msgs::get_angle_actResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::llm_msgs::get_angle_actResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[6] curangleRatio\n"
"\n"
;
  }

  static const char* value(const ::llm_msgs::get_angle_actResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::llm_msgs::get_angle_actResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.curangleRatio);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct get_angle_actResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::llm_msgs::get_angle_actResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::llm_msgs::get_angle_actResponse_<ContainerAllocator>& v)
  {
    s << indent << "curangleRatio[]" << std::endl;
    for (size_t i = 0; i < v.curangleRatio.size(); ++i)
    {
      s << indent << "  curangleRatio[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.curangleRatio[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LLM_MSGS_MESSAGE_GET_ANGLE_ACTRESPONSE_H
