// Generated by gencpp from file llm_msgs/pose_action_status.msg
// DO NOT EDIT!


#ifndef LLM_MSGS_MESSAGE_POSE_ACTION_STATUS_H
#define LLM_MSGS_MESSAGE_POSE_ACTION_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace llm_msgs
{
template <class ContainerAllocator>
struct pose_action_status_
{
  typedef pose_action_status_<ContainerAllocator> Type;

  pose_action_status_()
    : header()
    , resp_frame_id(0)
    , hand_move_success(0)
    , head_move_success(0)
    , gripper_move_success(0)
    , waist_move_success(0)  {
    }
  pose_action_status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , resp_frame_id(0)
    , hand_move_success(0)
    , head_move_success(0)
    , gripper_move_success(0)
    , waist_move_success(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _resp_frame_id_type;
  _resp_frame_id_type resp_frame_id;

   typedef uint8_t _hand_move_success_type;
  _hand_move_success_type hand_move_success;

   typedef uint8_t _head_move_success_type;
  _head_move_success_type head_move_success;

   typedef uint8_t _gripper_move_success_type;
  _gripper_move_success_type gripper_move_success;

   typedef uint8_t _waist_move_success_type;
  _waist_move_success_type waist_move_success;





  typedef boost::shared_ptr< ::llm_msgs::pose_action_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::llm_msgs::pose_action_status_<ContainerAllocator> const> ConstPtr;

}; // struct pose_action_status_

typedef ::llm_msgs::pose_action_status_<std::allocator<void> > pose_action_status;

typedef boost::shared_ptr< ::llm_msgs::pose_action_status > pose_action_statusPtr;
typedef boost::shared_ptr< ::llm_msgs::pose_action_status const> pose_action_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::llm_msgs::pose_action_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::llm_msgs::pose_action_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::llm_msgs::pose_action_status_<ContainerAllocator1> & lhs, const ::llm_msgs::pose_action_status_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.resp_frame_id == rhs.resp_frame_id &&
    lhs.hand_move_success == rhs.hand_move_success &&
    lhs.head_move_success == rhs.head_move_success &&
    lhs.gripper_move_success == rhs.gripper_move_success &&
    lhs.waist_move_success == rhs.waist_move_success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::llm_msgs::pose_action_status_<ContainerAllocator1> & lhs, const ::llm_msgs::pose_action_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace llm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::llm_msgs::pose_action_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::llm_msgs::pose_action_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::llm_msgs::pose_action_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::llm_msgs::pose_action_status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::llm_msgs::pose_action_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::llm_msgs::pose_action_status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::llm_msgs::pose_action_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d102c2efc0ecfb1e3d8d0927cd612413";
  }

  static const char* value(const ::llm_msgs::pose_action_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd102c2efc0ecfb1eULL;
  static const uint64_t static_value2 = 0x3d8d0927cd612413ULL;
};

template<class ContainerAllocator>
struct DataType< ::llm_msgs::pose_action_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "llm_msgs/pose_action_status";
  }

  static const char* value(const ::llm_msgs::pose_action_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::llm_msgs::pose_action_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"# 相应的hand_pose_req msg中header的seq,表示是对该帧pose的相应\n"
"uint32 resp_frame_id     \n"
"# 0-失败， 1-成功， 2-默认值(default），其他数值暂不可用，留待后续扩展   \n"
"uint8 hand_move_success      \n"
"uint8 head_move_success     \n"
"uint8 gripper_move_success \n"
"uint8 waist_move_success \n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::llm_msgs::pose_action_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::llm_msgs::pose_action_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.resp_frame_id);
      stream.next(m.hand_move_success);
      stream.next(m.head_move_success);
      stream.next(m.gripper_move_success);
      stream.next(m.waist_move_success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pose_action_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::llm_msgs::pose_action_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::llm_msgs::pose_action_status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "resp_frame_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.resp_frame_id);
    s << indent << "hand_move_success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hand_move_success);
    s << indent << "head_move_success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.head_move_success);
    s << indent << "gripper_move_success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gripper_move_success);
    s << indent << "waist_move_success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.waist_move_success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LLM_MSGS_MESSAGE_POSE_ACTION_STATUS_H
