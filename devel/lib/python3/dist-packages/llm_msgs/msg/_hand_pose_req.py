# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from llm_msgs/hand_pose_req.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class hand_pose_req(genpy.Message):
  _md5sum = "b6b3b996b8f56c6f6190cb1b04d5143a"
  _type = "llm_msgs/hand_pose_req"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header     

# 以下分别为手臂、头部、手指对应的控制数据，相应数据仅当对应使能位有效时才有意义
# 例如: 当hand_move_enable为1(enable状态)时, pose_req的数据才需要被执行，才有意义

# 手臂移动使能位-hand_move_enable, 手臂目标位姿-pose_req, 手臂复位-hand_reset(0-非复位位姿，1-复位位姿)
uint8 hand_move_enable    
uint8 hand_side 
uint8 hand_reset          
geometry_msgs/Pose pose_req 

# 头部移动使能位-move_enable, 头部目标位姿-(R, P, Y）
uint8 head_move_enable    
float64[] rpy

# 手部手指移动使能位-gripper_move_enable, 手指开度-[figure_1, figure_2, figure_3, figure_4, figure_5]
uint8 gripper_move_enable 
uint8 gripper_side  
uint8 finger_status
float32 little_finger
float32 ring_finger
float32 middle_finger
float32 index_finger
float32 thumb_bending
float32 thumb_rotating

# 腰部转动
uint8 waist_enable # 0-disable, 1-enable, 2-default, 其他数值暂不可用，留待后续
float32 waist_rotate_ang # 腰部旋转角度-rad


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['header','hand_move_enable','hand_side','hand_reset','pose_req','head_move_enable','rpy','gripper_move_enable','gripper_side','finger_status','little_finger','ring_finger','middle_finger','index_finger','thumb_bending','thumb_rotating','waist_enable','waist_rotate_ang']
  _slot_types = ['std_msgs/Header','uint8','uint8','uint8','geometry_msgs/Pose','uint8','float64[]','uint8','uint8','uint8','float32','float32','float32','float32','float32','float32','uint8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,hand_move_enable,hand_side,hand_reset,pose_req,head_move_enable,rpy,gripper_move_enable,gripper_side,finger_status,little_finger,ring_finger,middle_finger,index_finger,thumb_bending,thumb_rotating,waist_enable,waist_rotate_ang

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(hand_pose_req, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.hand_move_enable is None:
        self.hand_move_enable = 0
      if self.hand_side is None:
        self.hand_side = 0
      if self.hand_reset is None:
        self.hand_reset = 0
      if self.pose_req is None:
        self.pose_req = geometry_msgs.msg.Pose()
      if self.head_move_enable is None:
        self.head_move_enable = 0
      if self.rpy is None:
        self.rpy = []
      if self.gripper_move_enable is None:
        self.gripper_move_enable = 0
      if self.gripper_side is None:
        self.gripper_side = 0
      if self.finger_status is None:
        self.finger_status = 0
      if self.little_finger is None:
        self.little_finger = 0.
      if self.ring_finger is None:
        self.ring_finger = 0.
      if self.middle_finger is None:
        self.middle_finger = 0.
      if self.index_finger is None:
        self.index_finger = 0.
      if self.thumb_bending is None:
        self.thumb_bending = 0.
      if self.thumb_rotating is None:
        self.thumb_rotating = 0.
      if self.waist_enable is None:
        self.waist_enable = 0
      if self.waist_rotate_ang is None:
        self.waist_rotate_ang = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.hand_move_enable = 0
      self.hand_side = 0
      self.hand_reset = 0
      self.pose_req = geometry_msgs.msg.Pose()
      self.head_move_enable = 0
      self.rpy = []
      self.gripper_move_enable = 0
      self.gripper_side = 0
      self.finger_status = 0
      self.little_finger = 0.
      self.ring_finger = 0.
      self.middle_finger = 0.
      self.index_finger = 0.
      self.thumb_bending = 0.
      self.thumb_rotating = 0.
      self.waist_enable = 0
      self.waist_rotate_ang = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B7dB().pack(_x.hand_move_enable, _x.hand_side, _x.hand_reset, _x.pose_req.position.x, _x.pose_req.position.y, _x.pose_req.position.z, _x.pose_req.orientation.x, _x.pose_req.orientation.y, _x.pose_req.orientation.z, _x.pose_req.orientation.w, _x.head_move_enable))
      length = len(self.rpy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.rpy))
      _x = self
      buff.write(_get_struct_3B6fBf().pack(_x.gripper_move_enable, _x.gripper_side, _x.finger_status, _x.little_finger, _x.ring_finger, _x.middle_finger, _x.index_finger, _x.thumb_bending, _x.thumb_rotating, _x.waist_enable, _x.waist_rotate_ang))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose_req is None:
        self.pose_req = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.hand_move_enable, _x.hand_side, _x.hand_reset, _x.pose_req.position.x, _x.pose_req.position.y, _x.pose_req.position.z, _x.pose_req.orientation.x, _x.pose_req.orientation.y, _x.pose_req.orientation.z, _x.pose_req.orientation.w, _x.head_move_enable,) = _get_struct_3B7dB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rpy = s.unpack(str[start:end])
      _x = self
      start = end
      end += 32
      (_x.gripper_move_enable, _x.gripper_side, _x.finger_status, _x.little_finger, _x.ring_finger, _x.middle_finger, _x.index_finger, _x.thumb_bending, _x.thumb_rotating, _x.waist_enable, _x.waist_rotate_ang,) = _get_struct_3B6fBf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B7dB().pack(_x.hand_move_enable, _x.hand_side, _x.hand_reset, _x.pose_req.position.x, _x.pose_req.position.y, _x.pose_req.position.z, _x.pose_req.orientation.x, _x.pose_req.orientation.y, _x.pose_req.orientation.z, _x.pose_req.orientation.w, _x.head_move_enable))
      length = len(self.rpy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.rpy.tostring())
      _x = self
      buff.write(_get_struct_3B6fBf().pack(_x.gripper_move_enable, _x.gripper_side, _x.finger_status, _x.little_finger, _x.ring_finger, _x.middle_finger, _x.index_finger, _x.thumb_bending, _x.thumb_rotating, _x.waist_enable, _x.waist_rotate_ang))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose_req is None:
        self.pose_req = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.hand_move_enable, _x.hand_side, _x.hand_reset, _x.pose_req.position.x, _x.pose_req.position.y, _x.pose_req.position.z, _x.pose_req.orientation.x, _x.pose_req.orientation.y, _x.pose_req.orientation.z, _x.pose_req.orientation.w, _x.head_move_enable,) = _get_struct_3B7dB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rpy = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 32
      (_x.gripper_move_enable, _x.gripper_side, _x.finger_status, _x.little_finger, _x.ring_finger, _x.middle_finger, _x.index_finger, _x.thumb_bending, _x.thumb_rotating, _x.waist_enable, _x.waist_rotate_ang,) = _get_struct_3B6fBf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B6fBf = None
def _get_struct_3B6fBf():
    global _struct_3B6fBf
    if _struct_3B6fBf is None:
        _struct_3B6fBf = struct.Struct("<3B6fBf")
    return _struct_3B6fBf
_struct_3B7dB = None
def _get_struct_3B7dB():
    global _struct_3B7dB
    if _struct_3B7dB is None:
        _struct_3B7dB = struct.Struct("<3B7dB")
    return _struct_3B7dB
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
